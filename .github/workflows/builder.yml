name: Epic Firka Builder Workflow

on: workflow_dispatch

jobs:
  build-android:
    name: Build for Android
    runs-on: ubuntu-latest

    steps:
      - name: Download repository
        uses: actions/checkout@v4.2.2

      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.2.4
        with:
          fileName: firkaapp.jks
          encodedString: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > refilc/android/key.properties
          echo "storePassword=${{ secrets.KEY_PASSWORD }}" >> refilc/android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> refilc/android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> refilc/android/key.properties
          cp refilc/android/key.properties refilc/android/debugkey.properties

      - uses: actions/setup-java@v4.7.0
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "gradle"

      - uses: subosito/flutter-action@v2.18.0
        with:
          flutter-version: "3.27.1"
          channel: "stable"
          cache: "true"

      - name: Install dependencies
        run: |
          chmod +x fix-pub.sh
          ./fix-pub.sh

      - name: Build
        run: |
            cd refilc
            chmod +x build.sh
            ./build.sh
            cd ..

      - name: Upload Android Release
        uses: actions/upload-artifact@v4.6.1
        with:
          name: android-apks
          path: refilc/build/app/outputs/flutter-apk/app-*-release.apk


#  build-ios:
#    name: Build for IOS
#    runs-on: macos-latest
#    steps:
#      - name: Download repository
#        uses: actions/checkout@v4.2.2
#
#      - name: Install the Apple certificate and provisioning profile
#        env:
#          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#
#        run: |
#          # create variables
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
#          # import certificate and provisioning profile from secrets
#          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
#          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
#
#          # create temporary keychain
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#
#          # import certificate to keychain
#          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#          security list-keychain -d user -s $KEYCHAIN_PATH
#
#          # apply provisioning profile
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#
#      - uses: subosito/flutter-action@v2.18.0
#        with:
#          flutter-version: "3.27.1"
#          channel: "stable"
#          cache: "true"
#
#      - name: Install dependencies
#        run: |
#          chmod +x fix-pub.sh
#          bash fix-pub.sh
#
#      - name: Building IPA
#        run: |
#          cd refilc
#          chmod +x build-ipa.sh
#          bash build-ipa.sh
#          cd ..
#
#      - name: Upload Android Release
#        uses: actions/upload-artifact@v4.6.1
#        with:
#         name: ios-ipa
#         # refilc/build/app/outputs/flutter-apk/app-*-release.apk
#         path: refilc/build/app/outputs/ios/ipa/*.ipa
#
#      - name: Clean up keychain and provisioning profile
#        if: ${{ always() }}
#        run: |
#          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
#          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision